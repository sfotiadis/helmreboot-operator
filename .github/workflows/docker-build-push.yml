name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'chart/Chart.yaml'
      - 'cmd/**'
      - 'internal/**'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and push'
        required: false
        default: 'latest'

env:
  REGISTRY: docker.io
  IMAGE_NAME: sfotia2s/helmreboot-operator
  DOCKER_USERNAME: sfotia2s

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version from Chart.yaml
      id: chart-version
      run: |
        CHART_VERSION=$(grep '^version:' chart/Chart.yaml | cut -d' ' -f2)
        APP_VERSION=$(grep '^appVersion:' chart/Chart.yaml | cut -d' ' -f2 | tr -d '"')
        echo "chart-version=${CHART_VERSION}" >> $GITHUB_OUTPUT
        echo "app-version=${APP_VERSION}" >> $GITHUB_OUTPUT
        echo "Chart version: ${CHART_VERSION}"
        echo "App version: ${APP_VERSION}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=${{ steps.chart-version.outputs.app-version }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update Chart.yaml image tag
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Update the image tag in values.yaml to match the app version
        APP_VERSION=${{ steps.chart-version.outputs.app-version }}
        sed -i "s|repository: .*|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g" chart/values.yaml
        echo "Updated image repository in chart/values.yaml"

    - name: Generate release notes
      if: github.event_name == 'release'
      run: |
        echo "## Docker Image" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.chart-version.outputs.app-version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pull the image:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.chart-version.outputs.app-version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY